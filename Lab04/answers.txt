10. Unique Item in a List
Q: When overriding the equals() method of the Object class, you will have to cast the Object parameter obj to the type of object that you are dealing with. For example, in the Media class, you must cast obj to a Media, and then check the equality of the two objects’ attributes as per the requirements (i.e., title for Media; title and length for Track). If the passing object is not an instance of Media, what happens?

A: If the passed object (obj) is not an instance of Media, the equals() method will return false because the comparison cannot be performed. The equals() method in the Media class includes a check to ensure that obj belongs to the same class as Media using the getClass() method.

11. Polymorphism with toString() Method
Q: Iterate through the list and print out the information of the media by using the toString() method. Observe what happens and explain in detail.

A: When we iterate through the list using a for-each loop, the toString() method is called on each Media object. The toString() method is dynamically bound, meaning it is invoked based on the actual type of the object at runtime.

So, for each media object in the list, the appropriate toString() method of the respective subclass (Book, DVD, or CompactDisc) is executed, and the information specific to that type is printed. This demonstrates the concept of polymorphism, where objects of different subclasses can be treated as instances of a common superclass (Media in this case), allowing for code reuse and flexibility.

12. Sorting Media in the Cart
Q1: What class should implement the Comparable interface?
A1: The Media class should implement the Comparable interface.

Q2: In those classes, how should you implement the compareTo() method to reflect the ordering that we want?
A2: You should implement the compareTo() method to compare media items based on their cost. Here's an example implementation:

public class Media implements Comparable<Media> {
    private String title;
    private double cost;
    
    // Other attributes and methods
    
    @Override
    public int compareTo(Media other) {
        // First compare by title
        int titleComparison = this.title.compareTo(other.title);
        if (titleComparison != 0) {
            return titleComparison;
        }
        // Then compare by cost
        return Double.compare(this.cost, other.cost);
    }
}
This implementation compares media items first by their title and then by their cost if the titles are equal.

Q3: Can we have two ordering rules for the items (by title then cost and by cost then title) if we use this Comparable interface approach?
A3: No, we can't have multiple natural orderings using the Comparable interface because it defines a single compareTo() method for natural ordering. To implement multiple ordering rules, we should use the Comparator interface, which allows us to define multiple comparison strategies.

Q4: Suppose the DVDs have a different ordering rule from the other media types—that is, by title, then decreasing length, then cost. How would you modify your code to allow this?
A4: You can override the compareTo() method in the DVD class to implement the specific ordering rule for DVDs. Here's how you might do it:

public class DVD extends Media {
    private int length;
    private double cost;
    
    // Other attributes and methods
    
    @Override
    public int compareTo(Media other) {
        if (other instanceof DVD) {
            DVD otherDVD = (DVD) other;
            // Compare by title
            int titleComparison = this.title.compareTo(otherDVD.title);
            if (titleComparison != 0) {
                return titleComparison;
            }
            // Compare by decreasing length
            int lengthComparison = Integer.compare(otherDVD.length, this.length);
            if (lengthComparison != 0) {
                return lengthComparison;
            }
            // Compare by cost
            return Double.compare(this.cost, otherDVD.cost);
        } else {
            // If 'other' is not a DVD, use the default comparison
            return super.compareTo(other);
        }
    }
}
In this code:

Title Comparison: Compares the title of both DVDs.
Length Comparison: Compares the length in decreasing order (longer DVDs come first).
Cost Comparison: Compares the cost if both title and length are equal.
Fallback: If the other object is not a DVD, it falls back to the comparison defined in the Media class.
